import type { ProjectType } from "../../types";

export const MyProjects: ProjectType[] = [
  {
    id: 1,
    title: "Rock Paper Scissors with AI",
    description:
      "A modern, single-page Rock–Paper–Scissors game that pits the player against a simple AI with polished UI and responsive interactions.",
    subDescription: [
      "Built with React 19 and Vite for a fast development experience and optimized production build, using the native ESM module type declared in package.json.",
      "UI styling implemented with Tailwind CSS to create a clean, responsive interface and consistent design system across breakpoints.",
      "TypeScript provides static typing and project-level type safety; the build script runs tsc in a composite configuration before Vite build for reliable artifacts.",
      "ESLint and React Hooks linting enforce code quality and predictable hook usage; the project includes plugin configuration to catch common React patterns.",
      "Small footprint dependencies and Vite preview support enable quick local testing; deployed as a static site on Netlify for fast CDN delivery and zero-server maintenance.",
      "Design choices prioritize clarity and accessibility: large touch targets, clear game state feedback, animated transitions for rounds, and concise scoring UI.",
    ],
    repoLink: "https://github.com/StormKing969/rock-paper-scissors-game",
    liveLink: "https://rock-paper-scissors-with-ai-game.netlify.app/",
    projectLogo: null,
    projectImage: "rock-paper-scissors.png",
    tags: [
      { id: 1, name: "React", imageUrl: "react.svg" },
      { id: 3, name: "TypeScript", imageUrl: "typescript.svg" },
      { id: 4, name: "Vite", imageUrl: "vitejs.svg" },
      { id: 5, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 6, name: "Netlify", imageUrl: "netlify.svg" },
    ],
  },
  {
    id: 2,
    title: "Mead Memorial Chapel",
    description:
      "A public informational site documenting the effort to restore the Mead name to the Mead Memorial Chapel and sharing statements, updates, and background about the case.",
    subDescription: [
      "Project presents curated statements and historical context with an emphasis on clear typographic hierarchy and accessible content delivery.",
      "The design favors readable layouts and straightforward navigation to surface statements from stakeholders and administrators.",
      "Built as a modern React site using React 19 and React Router for routing.",
      "Tailwind CSS provides utility-driven styling and rapid layout iteration while class-variance-authority and clsx handle component variant logic and class composition for consistent UI patterns.",
      "Interactive and integration choices include Firebase (for potential content or form handling), EmailJS for contact form delivery, and Leaflet + react-leaflet for any map or location display needs.",
      "Deployment is configured for Netlify (live site at the provided URL) with a react-router build/dev/serve script flow.",
    ],
    repoLink: "https://github.com/StormKing969/mead-memorial-chapel",
    liveLink: "https://mead-memorial-chapel.netlify.app/",
    projectLogo: null,
    projectImage: "mead-memorial-chapel.png",
    tags: [
      { id: 1, name: "React", imageUrl: "react.svg" },
      { id: 2, name: "TypeScript", imageUrl: "typescript.svg" },
      { id: 3, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 4, name: "React Router", imageUrl: "react-router.svg" },
      { id: 5, name: "Vite", imageUrl: "vitejs.svg" },
      { id: 6, name: "Firebase", imageUrl: "firebase.svg" },
      { id: 7, name: "Leaflet", imageUrl: "leaflet.svg" },
      { id: 8, name: "EmailJS", imageUrl: "emailjs.jpeg" },
    ],
  },
  {
    id: 3,
    title: "Where in the world?",
    description:
      "A responsive REST Countries explorer that lets users search, filter, and view detailed information about countries with a color theme (background) switcher for light/dark modes.",
    subDescription: [
      "User-facing site focused on quick discovery and comparison of country data with emphasis on clean typographic hierarchy, accessible contrast, and intuitive filtering and search affordances.",
      "Built with React 19 and React Router for client-side routing and page structure.",
      "The project uses Vite for fast local dev and a modern ESM build pipeline, with TypeScript enabled for type safety and predictable refactors.",
      "Styling and theming are designed for simplicity and consistency using Tailwind-compatible tooling.",
      "A color theme switcher toggles global background and UI colors to support both light and dark reading experiences.",
      "Data is fetched from a REST Countries API endpoint and rendered in list and single-country detail views, with optimizations for minimal re-renders and predictable state flows.",
      "Deployment targets Netlify using the included react-router build and serve scripts for server-side routing compatibility.",
    ],
    repoLink:
      "https://github.com/StormKing969/rest-countries-api-with-color-theme-switcher",
    liveLink: "https://countries-api-with-bgcolor-switcher.netlify.app/",
    projectLogo: null,
    projectImage: "rest-countries-api.png",
    tags: [
      { id: 1, name: "React", imageUrl: "react.svg" },
      { id: 2, name: "React Router", imageUrl: "react-router.svg" },
      { id: 3, name: "TypeScript", imageUrl: "typescript.svg" },
      { id: 4, name: "Vite", imageUrl: "vitejs.svg" },
      { id: 5, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 6, name: "Netlify", imageUrl: "netlify.svg" },
    ],
  },
  {
    id: 4,
    title: "Personal Image Storage",
    description:
      "A lightweight web app for uploading, browsing, and managing personal images with a simple, responsive UI.",
    subDescription: [
      "User experience focuses on fast uploads and an uncluttered gallery view with clear affordances for searching, viewing, and deleting images.",
      "The UI emphasizes readable typography, consistent spacing, and responsive grid behavior for different screen sizes.",
      "Built with React 19 and Vite for snappy local development and optimized ESM builds.",
      "TypeScript provides type safety while ESLint and recommended plugins enforce consistent code quality and hook usage.",
      "Storage and backend interactions are handled via Appwrite SDK for secure file management and authentication-ready patterns.",
      "The app abstracts storage operations behind a concise client wrapper to keep components declarative and testable.",
      "Styling uses Tailwind CSS with a Vite-tailwind integration for utility-first, maintainable styles.",
      "Deployment is configured for Netlify with a production build served from Vite output and preview capabilities for QA.",
    ],
    repoLink: "https://github.com/StormKing969/image-storage-webapp",
    liveLink: "https://personal-image-storage-webapp.netlify.app/",
    projectLogo: null,
    projectImage: "image-storage-webapp.png",
    tags: [
      { id: 1, name: "React", imageUrl: "react.svg" },
      { id: 2, name: "Vite", imageUrl: "vitejs.svg" },
      { id: 3, name: "TypeScript", imageUrl: "typescript.svg" },
      { id: 4, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 5, name: "Appwrite", imageUrl: "appwrite.svg" },
      { id: 6, name: "ESLint", imageUrl: "eslint.svg" },
      { id: 7, name: "Netlify", imageUrl: "netlify.svg" },
    ],
  },
  {
    id: 5,
    title: "Personal Movie Review App",
    description:
      "A responsive app for browsing movies, saving personal ratings and reviews, and discovering titles through search and curated lists.",
    subDescription: [
      "Focused on fast discovery and lightweight personal curation, the UI emphasizes a clean card-based layout, readable typography, and responsive grid behavior so users can scan and compare titles on any device.",
      "Implemented with React 19 and Vite for fast local development and optimized ESM builds.",
      "React Router manages navigation between list, detail, and review pages while react-use supplies useful hooks for concise, resilient state and effect management.",
      "Persistence and backend interactions are integrated with Appwrite to handle user data, file storage for posters, and secure CRUD for reviews.",
      "The app abstracts Appwrite operations behind a small client layer to keep UI components declarative and testable.",
      "Styling uses Tailwind CSS with Vite integration for utility-first, maintainable styles.",
      "ESLint and recommended plugins enforce consistent code quality and hook usage. Build and deployment target Netlify using Vite production builds and preview support for QA.",
    ],
    repoLink: "https://github.com/StormKing969/movie-review-app",
    liveLink: "https://personal-movie-review-app.netlify.app/",
    projectLogo: null,
    projectImage: "movie-review-app.png",
    tags: [
      { id: 1, name: "React", imageUrl: "react.svg" },
      { id: 2, name: "Vite", imageUrl: "vitejs.svg" },
      { id: 3, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 4, name: "Appwrite", imageUrl: "appwrite.svg" },
      { id: 5, name: "React Router", imageUrl: "react-router.svg" },
      { id: 6, name: "ESLint", imageUrl: "eslint.svg" },
      { id: 7, name: "Netlify", imageUrl: "netlify.svg" },
    ],
  },
  {
    id: 6,
    title: "Price Tracker",
    description:
      "A web app that tracks product prices, surfaces trending deals, and notifies users when items hit target prices.",
    subDescription: [
      "Product-focused interface highlights trending items and individual product pages with a responsive, card-driven layout designed for quick scanning and comparison across devices.",
      "Built on Next.js 14 to leverage hybrid rendering.",
      "Server-side rendering and API routes deliver fast initial loads and power backend tasks such as scraping and scheduled checks.",
      "Price scraping and HTML parsing use axios and cheerio to extract product data from source pages.",
      "Persistent storage is implemented with MongoDB via Mongoose to model products, histories, and user alerts.",
      "Notifications and email workflows are implemented with nodemailer for transactional emails and a small alerts pipeline that checks stored thresholds.",
      "The app includes image carousels for richer product presentation using react-responsive-carousel.",
      "Styling and UI patterns use Tailwind CSS and Headless UI for accessible primitives and utility-driven layouts.",
      "The project is production-deployed to Vercel for global CDN delivery and autoscaled serverless functions.",
    ],
    repoLink: "https://github.com/StormKing969/price-tracker",
    liveLink: "https://price-tracker-lac.vercel.app/",
    projectLogo: null,
    projectImage: "price-tracker.png",
    tags: [
      { id: 1, name: "Next.js", imageUrl: "nextjs.svg" },
      { id: 2, name: "React", imageUrl: "react.svg" },
      { id: 3, name: "Cheerio", imageUrl: "cheerio.svg" },
      { id: 4, name: "Axios", imageUrl: "axios.jpeg" },
      { id: 5, name: "Mongoose", imageUrl: "mongoose.svg" },
      { id: 6, name: "Tailwind CSS", imageUrl: "tailwindcss.svg" },
      { id: 7, name: "Headless UI", imageUrl: "headless-ui.svg" },
      { id: 8, name: "Vercel", imageUrl: "vercel.svg" },
    ],
  },
];